#!/bin/bash

# Description
# -----------
# - Downloads FI-EN and KK-EN training / dev / test data

set -eo pipefail

# Created by argbash-init v2.8.1
# ARG_OPTIONAL_SINGLE([output-folder])
# ARG_OPTIONAL_BOOLEAN([fi-en])
# ARG_OPTIONAL_BOOLEAN([kk-en])
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

WGET="wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 0 -c"

create_folders() {
    exit 1
}

die() {
    local _ret=$2
    test -n "$_ret" || _ret=1
    test "$_PRINT_HELP" = yes && print_help >&2
    echo "$1" >&2
    exit ${_ret}
}

begins_with_short_option() {
    local first_option all_short_options='h'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_output_folder="./wmt19-data"
_arg_fi_en="off"
_arg_kk_en="off"

print_help() {
    printf '%s\n' "<The general help message of my script>"
    printf 'Usage: %s [--output-folder <arg>] [--(no-)fi-en] [--(no-)kk-en] [-h|--help]\n' "$0"
    printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline() {
    while test $# -gt 0; do
        _key="$1"
        case "$_key" in
        --output-folder)
            test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
            _arg_output_folder="$2"
            shift
            ;;
        --output-folder=*)
            _arg_output_folder="${_key##--output-folder=}"
            ;;
        --no-fi-en | --fi-en)
            _arg_fi_en="on"
            test "${1:0:5}" = "--no-" && _arg_fi_en="off"
            ;;
        --no-kk-en | --kk-en)
            _arg_kk_en="on"
            test "${1:0:5}" = "--no-" && _arg_kk_en="off"
            ;;
        -h | --help)
            print_help
            exit 0
            ;;
        -h*)
            print_help
            exit 0
            ;;
        *)
            _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
            ;;
        esac
        shift
    done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

printf 'Value of --%s: %s\n' 'output-folder' "$_arg_output_folder"
printf "'%s' is %s\\n" 'fi-en' "$_arg_fi_en"
printf "'%s' is %s\\n" 'kk-en' "$_arg_kk_en"

mkdir -p "${_arg_output_folder}"

# Hard-coded URLs for downloading translation data
fi_train_data_urls=(
    http://www.statmt.org/europarl/v9/training/europarl-v9.fi-en.tsv.gz
    https://s3.amazonaws.com/web-language-models/paracrawl/release3/en-fi.bicleaner07.tmx.gz
    https://tilde-model.s3-eu-west-1.amazonaws.com/rapid2016.en-fi.tmx.zip
)

#fi_train_data_urls=(
    #http://0.0.0.0:8000/fi-en/compressed/europarl-v9.fi-en.tsv.gz
    #http://0.0.0.0:8000/fi-en/compressed/en-fi.bicleaner07.tmx.gz
    #http://0.0.0.0:8000/fi-en/compressed/rapid2016.en-fi.tmx.zip
#)

kk_train_data_urls=(
    http://data.statmt.org/news-commentary/v14/training/news-commentary-v14-wmt19.en-kk.tsv.gz
    http://data.statmt.org/wikititles/v1/wikititles-v1.kk-en.tsv.gz
)

#kk_train_data_urls=(
    #http://0.0.0.0:8000/kk-en/compressed/news-commentary-v14-wmt19.en-kk.tsv.gz
    #http://data.statmt.org/wikititles/v1/wikititles-v1.kk-en.tsv.gz
#)

# Same for dev data
all_dev_data_url="http://data.statmt.org/wmt19/translation-task/dev.tgz"
#all_dev_data_url="http://0.0.0.0:8000/common/dev.tgz"

# Same for test data
all_test_data_url="http://data.statmt.org/wmt19/translation-task/test.tgz"
#all_test_data_url="http://0.0.0.0:8000/common/test.tgz"

echo "Creating output folders..."
for pair in "fi-en" "kk-en"; do

    [ "${pair}" = "fi-en" ] && lang_flag="_arg_fi_en" || lang_flag="_arg_kk_en"

    if [ "${!lang_flag}" = "on" ]; then
        echo "Creating folders for ${pair}"
        for subfolder in "compressed" "bin" "raw" "interim" "final"; do

            [ "${subfolder}" = "compressed" ] || [ "${subfolder}" = "bin" ] \
                && mkdir -vp "${_arg_output_folder}/${pair}/${subfolder}" \
                && continue

            for split in "train" "dev" "test"; do
                mkdir -vp "${_arg_output_folder}/${pair}/${subfolder}/${split}"
            done

        done
    fi
done

common_data_folder=${_arg_output_folder}/common/
mkdir -p "${common_data_folder}"

echo "Downloading train/valid/test data..."
for pair in "fi-en" "kk-en"; do

    [ "${pair}" = "fi-en" ] &&
        lang_flag="_arg_fi_en" ||
        lang_flag="_arg_kk_en"

    [ "${!lang_flag}" = "off" ] &&
        echo "Skipping ${pair} since it's off..." &&
        continue

    data_folder=${_arg_output_folder}/${pair}/

    [ "${pair}" = "fi-en" ] &&
        lang_flag="_arg_fi_en" ||
        lang_flag="_arg_kk_en"

    echo "Downloading dev datasets from ${all_dev_data_url}"
    $WGET -O "${common_data_folder}/dev.tgz" "${all_dev_data_url}"
    tar xvfz "${common_data_folder}/dev.tgz" -C "${common_data_folder}"

    echo "Downloading test datasets from ${all_test_data_url}"
    $WGET -O "${common_data_folder}/test.tgz" "${all_test_data_url}"
    tar xvfz "${common_data_folder}/test.tgz" -C "${common_data_folder}"
    test -d "${common_data_folder}/test" ||
        mv "${common_data_folder}/sgm" "${common_data_folder}/test"

    if [ "${pair}" = "fi-en" ]; then

        # Download training data
        echo "Downloading training data for Finnish..."
        pushd "${data_folder}/compressed"
        for url in "${fi_train_data_urls[@]}"; do
            $WGET "${url}"
        done
        for file in ./*.gz; do
            fname=$(basename "${file}" | sed "s/\.gz$//g")
            gunzip -v -c "${file}" >"${data_folder}/raw/train/${fname}" &
        done
        wait

        for file in ./*.zip; do
            fname=$(basename "${file}" | sed "s/\.zip$//g")
            unzip -d "${data_folder}/raw/train/" "${file}"  &
        done
        wait

        popd

        # Download dev data
        echo "Creating FI-EN dev datasets..."
        pushd "${common_data_folder}/dev/"
        for file in ./*2018*"fi"*; do cp -v "${file}" "${data_folder}/raw/dev"; done
        popd

        # Download test data
        echo "Creating FI-EN test datasets..."
        pushd "${common_data_folder}"

        pushd "test"
        for file in ./*"fi"*; do cp -v "${file}" "${data_folder}/raw/test"; done
        popd && popd

    elif [ "${pair}" = "kk-en" ]; then
        echo "Downloading KK-EN data"
        # Download training data
        echo "Downloading training data for Kazakh..."
        pushd "${data_folder}/compressed"
        for url in "${kk_train_data_urls[@]}"; do
            $WGET "${url}"
        done
        for file in ./*.gz; do
            echo "file = ${file}"
            fname=$(basename "${file}" | sed "s/\.gz$//g")
            gunzip -v -c "${file}" >"${data_folder}/raw/train/${fname}" &
        done
        wait

        for file in ./*.zip; do
            fname=$(basename "${file}" | sed "s/\.zip$//g")
            unzip -v "${file}" >"${data_folder}/raw/train/${fname}" &
        done
        wait

        # delete extraneous file
        pushd "${data_folder}/raw/train" && rm "*" && popd

        popd

        # Download dev data
        echo "Creating KK-EN dev datasets..."
        pushd "${common_data_folder}/dev/"
        for file in ./*kk*; do cp -v "${file}" "${data_folder}/raw/dev/"; done
        popd

        # Download test data
        echo "Creating KK-EN test datasets..."
        pushd "${common_data_folder}"
        pushd "test"
        for file in ./*kk*; do cp -v "${file}" "${data_folder}/raw/test/"; done
        popd && popd
        rm -f "${data_folder}/raw/\*"
    else
        echo "Invalid language pair!"
        exit 1
    fi
done

# ] <-- needed because of Argbash
