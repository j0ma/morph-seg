#!/bin/bash

# Created by argbash-init v2.8.1
# ARG_OPTIONAL_SINGLE([lang])
# ARG_OPTIONAL_SINGLE([raw-data-folder])
# ARG_OPTIONAL_SINGLE([output-file])
# ARG_OPTIONAL_BOOLEAN([with-counts])
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die() {
    local _ret=$2
    test -n "$_ret" || _ret=1
    test "$_PRINT_HELP" = yes && print_help >&2
    echo "$1" >&2
    exit ${_ret}
}

begins_with_short_option() {
    local first_option all_short_options='h'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_lang=
_arg_raw_data_folder=
_arg_output_file=
_arg_with_counts=

print_help() {
    printf '%s\n' "Script to generate vocabulary of input text, optionally with counts."
    printf 'Usage: %s [--lang <arg>] [--raw-data-folder <arg>] [--output-file <arg>] [--with-counts <arg>] [-h|--help]\n' "$0"
    printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline() {
    while test $# -gt 0; do
        _key="$1"
        case "$_key" in
        --lang)
            test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
            _arg_lang="$2"
            shift
            ;;
        --lang=*)
            _arg_lang="${_key##--lang=}"
            ;;
        --raw-data-folder)
            test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
            _arg_raw_data_folder="$2"
            shift
            ;;
        --raw-data-folder=*)
            _arg_raw_data_folder="${_key##--raw-data-folder=}"
            ;;
        --output-file)
            test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
            _arg_output_file="$2"
            shift
            ;;
        --output-file=*)
            _arg_output_file="${_key##--output-file=}"
            ;;
        --no-with-counts | --with-counts)
            _arg_with_counts="on"
            test "${1:0:5}" = "--no-" && _arg_with_counts="off"
            ;;
        -h | --help)
            print_help
            exit 0
            ;;
        -h*)
            print_help
            exit 0
            ;;
        *)
            _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
            ;;
        esac
        shift
    done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

if [ -z "${MOSES_SCRIPTS}" ]; then
    echo "Please make sure the MOSES_SCRIPTS environment variable is set!"
    exit 1
fi

MOSES_TOKENIZER_SCRIPT="$MOSES_SCRIPTS/tokenizer/tokenizer.perl"
MOSES_LOWERCASE_SCRIPT="$MOSES_SCRIPTS/tokenizer/lowercase.perl"
MOSES_NORM_PUNC="$MOSES_SCRIPTS/tokenizer/normalize-punctuation.perl"
MOSES_REM_NON_PRINT_CHAR="$MOSES_SCRIPTS/tokenizer/remove-non-printing-char.perl"

compute_token_counts() {
    LANGUAGE=$1
    WITH_COUNTS=$2

    if [ -n "$WITH_COUNTS" ]; then
        UNIQ_CMD="uniq -c"
        SORT_CMD="sort -nr"
    else
        UNIQ_CMD="uniq"
        SORT_CMD="sort"
    fi

    if [ "$LANGUAGE" == "en" ]; then
        perl "$MOSES_NORM_PUNC" "$LANGUAGE" |
            perl "$MOSES_REM_NON_PRINT_CHAR" |
            perl "$MOSES_TOKENIZER_SCRIPT" |
            perl "$MOSES_LOWERCASE_SCRIPT" |
            sed "s/ /\n/g" |
            sort |
            $UNIQ_CMD |
            $SORT_CMD
    else
        sed "s/ /\n/g" |
            sort |
            $UNIQ_CMD |
            $SORT_CMD
    fi
}

get_raw_data_folders() {
    RAW_DATA_FOLDER=$1
    LANGUAGE=$2
    if [ "$LANGUAGE" == "en" ]; then
        echo "$RAW_DATA_FOLDER/flores/wiki_ne_en/train.en"
        echo "$RAW_DATA_FOLDER/flores/wiki_si_en/train.en"
    else
        echo "$RAW_DATA_FOLDER/flores/wiki_${LANGUAGE}_en/train.$LANGUAGE"
    fi
}

printf 'Value of --%s: %s\n' 'lang' "$_arg_lang"
printf 'Value of --%s: %s\n' 'raw-data-folder' "$_arg_raw_data_folder"
printf 'Value of --%s: %s\n' 'output-file' "$_arg_output_file"
printf 'Value of --%s: %s\n' 'with-counts' "$_arg_with_counts"

echo "Computing raw data folders"
TRAIN_FILES=$(get_raw_data_folders "$_arg_raw_data_folder" "$_arg_lang")
cat $TRAIN_FILES |
    compute_token_counts "$_arg_lang" "$_arg_with_counts" \
        >"$_arg_output_file"

# ] <-- needed because of Argbash
