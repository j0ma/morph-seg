#!/bin/bash

set -euo pipefail

# Created by argbash-init v2.8.1
# ARG_OPTIONAL_SINGLE([input])
# ARG_OPTIONAL_SINGLE([output])
# ARG_OPTIONAL_SINGLE([model-binary])
# ARG_OPTIONAL_SINGLE([model-type])
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die() {
    local _ret=$2
    test -n "$_ret" || _ret=1
    test "$_PRINT_HELP" = yes && print_help >&2
    echo "$1" >&2
    exit ${_ret}
}

begins_with_short_option() {
    local first_option all_short_options='h'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_input=
_arg_output=
_arg_model_binary=
_arg_model_type=

print_help() {
    printf '%s\n' "Script to segment FlatCat/LMVR output for MC2010 evaluation"
    printf 'Usage: %s [--input <arg>] [--output <arg>] [--model-binary <arg>] [--model-type <arg>] [-h|--help]\n' "$0"
    printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline() {
    while test $# -gt 0; do
        _key="$1"
        case "$_key" in
        --input)
            test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
            _arg_input="$2"
            shift
            ;;
        --input=*)
            _arg_input="${_key##--input=}"
            ;;
        --output)
            test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
            _arg_output="$2"
            shift
            ;;
        --output=*)
            _arg_output="${_key##--output=}"
            ;;
        --model-binary)
            test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
            _arg_model_binary="$2"
            shift
            ;;
        --model-binary=*)
            _arg_model_binary="${_key##--model-binary=}"
            ;;
        --model-type)
            test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
            _arg_model_type="$2"
            shift
            ;;
        --model-type=*)
            _arg_model_type="${_key##--model-type=}"
            ;;
        -h | --help)
            print_help
            exit 0
            ;;
        -h*)
            print_help
            exit 0
            ;;
        *)
            _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
            ;;
        esac
        shift
    done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

validate() {
    [ -z "$1" ] && print_help && exit 1
}

segment_lmvr() {

    # make sure we're actually running 2.7
    if [ -z "$(python -c "import sys; print(sys.version)" | grep -E "^2\.7")" ]; then
        echo "Need to be running Python 2.7 for LMVR!"
        exit 1
    fi

    INPUT_FILE=$1
    MODEL_BINARY=$2
    OUTPUT_FILE=$3

    echo "Segmenting with LMVR..."
    lmvr-segment \
        "${MODEL_BINARY}" \
        --output-categories \
        -o "${OUTPUT_FILE}" \
        "${INPUT_FILE}"
}

segment_flatcat() {

    INPUT_FILE=$1
    MODEL_BINARY=$2
    OUTPUT_FILE=$3

    echo "Segmenting with Flatcat..."
    flatcat-segment \
        "${MODEL_BINARY}" \
        --output-categories \
        -o "${OUTPUT_FILE}" \
        "${INPUT_FILE}"

}

printf 'Value of --%s: %s\n' 'input' "$_arg_input"
printf 'Value of --%s: %s\n' 'output' "$_arg_output"
printf 'Value of --%s: %s\n' 'model-binary' "$_arg_model_binary"
printf 'Value of --%s: %s\n' 'model-type' "$_arg_model_type"

if [ "$_arg_model_type" = "flatcat" ]; then
    segment_flatcat \
        "${_arg_input}" \
        "${_arg_model_binary}" \
        "${_arg_output}"
elif [ "$_arg_model_type" = "lmvr" ]; then
    segment_lmvr \
        "${_arg_input}" \
        "${_arg_model_binary}" \
        "${_arg_output}"
else
    echo "Invalid model type! Only \"flatcat\" and \"lmvr\" are supported!"
fi

# ] <-- needed because of Argbash
